<?php declare(strict_types = 1);

namespace WhiteDigital\Translation\EventSubscriber;

use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface;
use Symfony\Component\EventDispatcher\EventSubscriberInterface;
use Symfony\Component\Finder\Finder;
use WhiteDigital\Translation\Entity\Translation;
use WhiteDigital\Translation\Event\TranslationUpdatedEvent;

use function file_exists;
use function file_put_contents;
use function function_exists;
use function ini_get;
use function opcache_invalidate;
use function sprintf;
use function touch;
use function unlink;

use const PHP_SAPI;

final readonly class TranslatorFileCheckEventSubscriber implements EventSubscriberInterface
{
    public function __construct(private EntityManagerInterface $em, private ParameterBagInterface $bag)
    {
    }

    public static function getSubscribedEvents(): array
    {
        return [
            TranslationUpdatedEvent::EVENT => ['translationUpdated', 9999],
        ];
    }

    public function translationUpdated(): void
    {
        $domains = $this->em->getRepository(Translation::class)->getDomains();
        $locales = $this->em->getRepository(Translation::class)->getLocales();
        foreach ($locales as $locale) {
            foreach ($domains as $domain) {
                if (!file_exists($file = $this->bag->get('translator.default_path') . '/' . $domain . '.' . $locale . '.db')) {
                    touch($file);
                    file_put_contents($file, '/** autogenerated file to use database loaded translations */');
                }
            }

            $this->removeCacheFile($locale);
        }
    }

    /**
     * copy from lexik translation bundle.
     */
    public function removeCacheFile(string $locale): bool
    {
        $finder = new Finder();
        $finder->files()->in($this->bag->get('kernel.cache_dir') . '/translations')->name(sprintf('/catalogue\.%s.*\.php$/', $locale));
        $deleted = true;
        foreach ($finder as $file) {
            $path = $file->getRealPath();
            $this->invalidateSystemCacheForFile($path);
            $deleted = unlink($path);

            $metadata = $path . '.meta';
            if (file_exists($metadata)) {
                $this->invalidateSystemCacheForFile($metadata);
                unlink($metadata);
            }
        }

        return $deleted;
    }

    /**
     * copy from lexik translation bundle.
     */
    protected function invalidateSystemCacheForFile(string $path): void
    {
        if (ini_get('apc.enabled') && function_exists('apc_delete_file')) {
            if (apc_exists($path)) {
                apc_delete_file($path);
            }
        } elseif ('cli' === PHP_SAPI ? ini_get('opcache.enable_cli') : ini_get('opcache.enable')) {
            if (function_exists('opcache_invalidate')) {
                opcache_invalidate($path, true);
            }
        }
    }
}
