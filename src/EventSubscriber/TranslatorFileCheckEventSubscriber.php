<?php declare(strict_types = 1);

namespace WhiteDigital\Translation\EventSubscriber;

use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface;
use Symfony\Component\EventDispatcher\EventSubscriberInterface;
use Symfony\Component\HttpKernel\Event\RequestEvent;
use WhiteDigital\Translation\Entity\Translation;
use WhiteDigital\Translation\Event\TranslationUpdatedEvent;

use function file_exists;
use function file_put_contents;
use function touch;

final readonly class TranslatorFileCheckEventSubscriber implements EventSubscriberInterface
{
    public function __construct(private EntityManagerInterface $em, private ParameterBagInterface $bag)
    {
    }

    public static function getSubscribedEvents(): array
    {
        return [
            TranslationUpdatedEvent::EVENT => ['translationUpdated', 9999],
        ];
    }

    public function translationUpdated(RequestEvent $requestEvent): void
    {
        if (!$requestEvent->isMainRequest()) {
            return;
        }

        $domains = $this->em->getRepository(Translation::class)->getDomains();
        foreach ($domains as $domain) {
            if (!file_exists($file = $this->bag->get('translator.default_path') . '/' . $domain . '.en.db')) {
                touch($file);
                file_put_contents($file, '/** autogenerated file to use database loaded translations */');
            }
        }
    }
}
